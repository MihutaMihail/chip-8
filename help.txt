---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// Chip 8 Specs \\\
//
// --- Memory [4096]byte
// Chip-8 has 4096 memory locations
//
// --- Registers [16]byte
// Used to store values ranging from V0 to VF. These registers are 8 bits (byte) long and are used to 
// store data for future use.
//
// --- Pc uint16.
// Program Counter. Keeps track of the memory addresses that are currently executed instruction
// When jumps are occured, the PC can be modified to redirect the flow of the program and its next instructions
//
// --- I uint16
// Index Register. Used to store values that involve memory operations
//
// --- Stack [16]uint16
// The stack has 16 levels of nesting used for managing the flow of execution and handle subroutines
// (sequence of program instructions)
//
// --- Sp byte
// Stack Pointer. Keep track of current nesting level
// 
// --- COpcode opcode
// Represents the current opcode. The opcode is needed to execute the correct instruction.
// Once the current opcode instruction is executed, the next opcode is loaded
// 
// --- FrameBuffer window.FrameBuffer
// This is the screen where all content will be displayed hence it's coming
// from the package 'window'. It is 64x32 bytes
//
// --- Instructions map[uint16]func(){}
// Key : opcode
// Value : function containing the code needed to execute the respective instruction
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
// func (oc opcode) GetOpcodeInstruction() uint16 {} \\
// 
// Location : chip8/opcode.go
//-------------------------------------------------------------------------------------------------------------------------
// *** nibble := (uint16(oc) & uint16(0xF000)) >> 12  ***
//
// DESCRIPTION :
//  This line of code is used to get then nibble (highest / most important 4 bits) of the opcode (16-bit)
//  The nibble indicates the instruction while the 12 other bits are the parameters that come along with the instruction
//  For example, one of the opcode is 1NNN which is a jump. The jump is indicated by the 1 (4-bits / nibble) but the address 
//  of where the jump will end is located in the NNN (12-bits)
//
// CODE : 
//  --- uint16(oc) 
//   Converts the opcode to a unsigned 16-bit to ensure that the opcode will be treated as a 16-bit value
//
//  --- uint16(0xF000)
//   This is the equivalent of 1111 0000 0000 0000 in binary. It's used as a bitmask
//
//  --- &
//   The '&' operator performs a bitwise AND operation between uint16(oc) and uint16(0xF000). This operation retains only 
//   the bits that are set to 1 in 'oc' AND '0xF000'. Effectively, this extracts the nibble.
//   'oc'     ---> 0110 1010 0110 1110
//   '0xF000' ---> 1111 0000 0000 0000
//   'result' ---> 0110 0000 0000 0000
//
//  --- >> 12
//   The '>>' operation will perform a bitwise right shift to shift the nibble by 12 positions. This means that the 
//   corresponding bits that were extracted will shift to the least important 4-bit. Effectively. This isolates the nibble.
-------------------------------------------------------------------------------------------------------------------------
// *** case uint16(0x0) / uint16(0x8) / uint16(0xE) / uint16(0xF) ||| default***
// 
// DESCRIPTION : 
//  These cases are part of a switch based on the extracted nibble. The reason for 4 cases is because in the opcode table
//  there's only 4 opcodes with have multiple variations that have the same nibble (0, 8, E, F). The opcodes that 
//  have an unique nibble, are being handled by the default case.
//
// CODE :
//  --- case uint16(0x8):
//  --- return uint16(oc) & uint16(0xF00F)
//   The opcodes that have the same nibble have only one thing that differentiates them, the lowest 4-bits.
//   Meaning, if you want to return the proper instruction, you will need to return the nibble (0xF000) and the 
//   lowest 4-bits (0x000F). Returning both will result in (0xF00F)
//
//  --- case uint16(0xE):
//  --- return uint16(oc) & uint16(0xF0FF)
//   The same concept applies to the opcodes with E as their nibble. The difference here is actually the lowest byte (8-bits)
//   So if you want to return the opcode you will need to return the nibble (0xF000) and the lowest 8-bits (0x00FF)
//
// --- default:
// --- return uint16(oc) & uint16(0xF000)
//  Since the other opcodes have no other variations we'll just return the instruction part of the opcode since the 
//  other bits are used as parameters that will be used in the function handling its respective instruction.
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (c8 *Chip8) fetchOpcode() {} \\\
//
// Location : chip8/opcode.go
//-------------------------------------------------------------------------------------------------------------------------
// *** opcode(uint16(c8.Memory[c8.Pc])<<8 | uint16(c8.Memory[c8.Pc+1])) ***
//
// DESCRIPTION :
//  Fetching an opcode requires to go into the memory and use the program counter to indicate the location of the opcode.
//  The program counter will start at 0x200 or 512. The memory is made out of bytes, this means that to get an opcode, which is
//  2 bytes long, we'll need to read two bytes consecutively to then assemble them into a 16-bit opcode.
//
// CODE :
//  --- c8.Memory[c8.Pc] / c8.Memory[c8.Pc+1]
//   These retrieve the first byte and the next byte respectively. The program counter is used to keep track of where the 
//   in the memory we are. This program counter will be increased by 2 since we're currently reading the next 2 bytes which
//   we no longer need
//
// --- <<8
//  Getting an opcode consists in reading the next 2 bytes. However if we actually want to store them both, we'll need to 
//  shift the first byte to the left by 8 positions because when fetching a byte, it will automatically be stored in the
//  lowest byte. With this, it gets moved to the highest byte so that the next byte goes to the lowest byte.
//
// --- |
//  The '|' operator will perform a bitwise OR operation on the two bytes. This will merge the bits from the first 
//  byte (in the higher 8 bits) and the bits from the second byte (in the lower 8 bits) into a single 16-bit integer.
//  'firstByte'  ---> 1011 0010 0000 0000
//  'secondByte' ---> 0000 0000 1001 1110
//  'result'     ---> 1011 0010 1001 1110
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (c8 *Chip8) loadFile(filename string, maxCapacity int, startAddress int, memory *[TotalMemory]byte) error {} \\\
//
// Location : chip8/rom.go
//-------------------------------------------------------------------------------------------------------------------------
// *** copy(memory[startAddress:], file[:]) ***
//
// DESCRIPTION :
//  This is the code that will copy the contents of the file into our memory at a specific part.
//
// CODE :
//  --- memory[startAddress:]
//   Here we're using the startAddress (which references the const in chip8/specs.go - PCStartAddress). This is equivalent
//   to 0x200 or 512. It is stated that the ROM should be loaded at this value. The ':' is used to indicate that the copy
//   will happen AFTER the startAddress
//
// --- file[:]
//  This just indicates that the whole content of the 'file' will be used (copied in this case)
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func ToDraw(buffer FrameBuffer, w *pixelgl.Window) {} \\\
//
// Location : window/window.go
//-------------------------------------------------------------------------------------------------------------------------
// *** w.Clear(colornames.Black) ***
// *** imd := imdraw.New(nil) *** 
// *** imd.Color = pixel.RGB(1, 1, 1) *** 
//
// DESCRIPTION :
//  This block of code is used to prepare the environnement to draw the pixels
//
// CODE : 
// --- w.Clear(colornames.Black) 
//  Using the window 'w' we can clear the screen a color (black).
//
// --- imd := imdraw.New(nil)
//  Creating a new nil imdraw object for further use
//
// --- imd.Color = pixel.RGB(1, 1, 1)
//  Here we set the color that will be used to draw the pixels with (white).
//-------------------------------------------------------------------------------------------------------------------------
// *** for y := 0; y < 32; y++ ***
// *** for x := 0; x < 64; x++ ***
//
// DESCRIPTION :
//  This block of code is a pair of nested loops over a 2D grid with the dimensions 64x32. 64 indicates the width and 32
//  indcate the height. The reason we do this is to go through every single value in the FrameBuffer.
//-------------------------------------------------------------------------------------------------------------------------
// *** if *buffer.Get(x, 31-y) != 0 ***
//
// DESCRIPTION :
//  Here we check if the value from the function Get() with the coordinates (x, 31-y) is not 0. If it's 1, there's no need
//  draw that pixel on the screen. The reason why we do 31-y is because the (0,0) coordinates for the pixelgl window are 
//  actually in the lower left corner of the screen and not the upper left corner like the Chip-8 emulator, so we need
//  to go in reverse.
// 
// CODE :
// --- *buffer.Get(x, 31-y) 
//  The function Get() returns the memory address of the value with the coordinates (x, y). We cannot compare this value to
//  an int like 0 so we need to use the * to get the value that the memory address points to.
//-------------------------------------------------------------------------------------------------------------------------
// *** upperLeftX := SizePixel * float64(x) ***
// *** upperLeftY := SizePixel * float64(y) *** 
// *** bottomRightX := upperLeftX + SizePixel *** 
// *** bottomRightY := upperLeftY + SizePixel *** 
//
// DESCRIPTION :
//  To be able to draw the pixels inside the window, we first need to specify the upper left coordinates (x, y) and the bottom
//  right coordinates (x, y). What we do is just multiply the X / Y value by the size of the pixel that we specified to get
//  the coordinates X and Y for that specific pixel
//-------------------------------------------------------------------------------------------------------------------------
// *** imd.Push(pixel.V(upperLeftX, upperLeftY)) ***
// *** imd.Push(pixel.V(bottomRightX, bottomRightY)) *** 
// *** imd.Rectangle(0) *** 
// *** imd.Draw(w) ***
//
// DESCRIPTION :
//  Know that we have specified the upper left and bottom right coordinates we can use those values to create the vectors
//  neeeded for the imdraw object to draw the rectangle.
//
// CODE :
// --- pixel.V(upperLeftX, upperLeftY)
//  This creates a 2D vector in the pixel library.
//
// --- imd.Push() 
//  This will push the 2D vector point inside the list of vertices that will be used to draw shapes. In this case, we need 
// to push two of them, the upper left and the bottom right corner.
// 
// --- imd.Rectangle(0)
//  This method draws a rectangle. The 0 indicates that the rectangle will be a filled rectangle. Once this method is
//  called. Every other push will create another list of vertices that will be used to draw another shape. 
//
// --- imd.Draw(w)
//  The method Draw() will take all the vertices stored into our 'imd' variable and draw them.
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (myGame *Game) RunGame() {} \\\
//
// Location : game/game.go
//-------------------------------------------------------------------------------------------------------------------------
// *** go myGame.gameLoop() ***
// *** myGame.updateWindow() ***
//
// DESCRIPTION :
//  Those two methods are needed to run the Chip-8 Emulator. Both of these methods need to run at the same time. The problem
//  is that when calling a function it needs to end for the next line of code to be executed. Since the gameLoop() doesn't 
//  actually return anything, the next line can't be executed. This is where 'go' comes in clutch. It allows us to start
//  a new goroutine for the gameLoop() to run in without blocking the main thread. This way, the gameLoop() will run on 
//  its own and the next line can be executed normally to allow the emulator work properly.
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (myApp *Game) gameLoop() {} / func (myGame *Game) updateWindow() {} \\\
//
// Location : game/game.go
//-------------------------------------------------------------------------------------------------------------------------
// *** clock := time.NewTicker(chip8.Frequency)  ***
//
// DESCRIPTION :
//  To execute the game loop / window update at 60Hz we can create a ticker where it will tick every 1/60 seconds.
//-------------------------------------------------------------------------------------------------------------------------
// *** <-clock.C ***
//
// DESCRIPTION :
//  This is the code that will block everything that follows it until it receive a tick 
//  (the duration has been set beforehands)
//-------------------------------------------------------------------------------------------------------------------------
// *** myGame.window.Update() (updateWindow()) ***
//
// DESCRIPTION :
//  This is a function by the package pixelgl that needs to be executed every frame. This method is called at the end.
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (c8 *Chip8) IDXYN() {} \\\
//
// Location : chip8/instructions.go
//-------------------------------------------------------------------------------------------------------------------------
// *** vX := c8.Registers[c8.COpcode.X()] ***
// *** vY := c8.Registers[c8.COpcode.Y()] ***
// *** hSprite := int(c8.COpcode.N()) ***
// *** i := int(c8.I) ***
// *** c8.Registers[0xF] = 0 ***
//
// DESCRIPTION :
//  This block of code is the necessary setup the sprite and the collision flag
//
// CODE :
//  --- c8.COpcode.X() / c8.COpcode.Y() / ...etc
//   The instruction that we're currently working is 'DXYN'. To get the vX and vY, we need to get the values X and Y
//   inside the instruction 'DXYN'. For what we use the functions that we made in chip8/opcode.go
//
//  --- vX := c8.Registers[c8.COpcode.X()] / vY := c8.Registers[c8.COpcode.Y()]
//   The wiki states that the coordinates are vX and vY. These values are part of the Registers.
//
//  --- hSprite := int(c8.COpcode.N())
//   The wiki states that the Height of the pixel is N so we'll go and get the value N from the opcode.
//
//  --- i := int(c8.I)
//   The wiki states that the sprite is located at I so we're getting the value. Reminder, the I was set beforehand.
//   There's an instruction called 'ANNN' that sets I to NNN. In here, all we're doing is getting the value.
//
//  --- c8.Registers[0xF] = 0
//   This is used to set up the collision flag (VF) to 0 (OFF). The collision flag is used to indicate if the sprite bit
//   and the FrameBuffer bit are both set to 1 (ON). If yes, then the collision flag will be set to 1 to indicate that. 
//-------------------------------------------------------------------------------------------------------------------------
// *** for y := 0; y < hSprite; y++ ***
// *** for x := 0; x < 8; x++ ***
//
// DESCRIPTION :
//  This is a pair of nested loops. This has the goal to go through every single bit in the sprite so that we can check which
//  ones need to be drawn. hSprite = height / 8 = width
//-------------------------------------------------------------------------------------------------------------------------
// *** _byte := c8.Memory[i+y] ***
// *** spritePx := _byte & (0x80 >> x) ***
//
// DESCRIPTION :
//  This block of code serves the purpose of getting every single bit of the sprite. It uses the I that we got earlier to 
//  access the memory location of where the sprite is located. Once we got the byte from the memory, all we need is to get 
//  every bit from this byte which represent a pixel from the sprite
// 
// CODE :
//  --- _byte := c8.Memory[i+y]
//   I is the index in memory where the sprite data is located. y represents the row of the current sprite. With this we can
//   through the whole sprite data and get every byte of it.
//
//  --- (0x80 >> x)
//   0x80 represents 1000 0000. x represents the amount that we want to shift the 1 by.
//   For example, in the nested loops, x = 3 which means that know our 0x80 is equal to 0001 0000
//   Since a pixel has a width of 8 pixels and how the loop is made, the x value will go from 0 so 1000 0000
//   all the way to 7 which is 0000 0001.
//
//  --- spritePx := _byte & (0x80 >> x)
//   Here we'll use the operator '&' to do a bitwise AND operation between the byte that we have extracted from the memory and
//   the bitmask specified. Above I've explained how the bitmask shifting to the right works so in this case we'll be able to
//   get every bit of the byte and use it later in the function.
//-------------------------------------------------------------------------------------------------------------------------
// *** if spritePx != 0 ***
//
// DESCRIPTION :
//  The reason why we're checking the spritePx to not be 0 is because we don't want to draw any pixels that are set to 0.
//  Any pixels that are set to 0 (OFF) are going to be transparent or empty.
//-------------------------------------------------------------------------------------------------------------------------
// *** screenX := int(vX) + x ***
// *** screenY := int(vY) + y ***
// *** cellFrameBuffer := c8.FrameBuffer.Get(screenX, screenY) ***
//
// DESCRIPTION :
//  vX and vY represent the starting position of the sprite howewer we then need to add x / y to get the next coordinates
//  of the next pixels that need to be drawn (if set to 1 (ON)). We have to convert it to int for the operation and for
//  our Get() function 
//
// CODE :
// --- cellFrameBuffer := c8.FrameBuffer.Get(screenX, screenY)
//  To indicate to the window that we'll need to draw a particular pixel, we'll need to modify the value inside the FrameBuffer
//  What we do is call the function Get() with the coordinates that we calculated earlier, to get the cell of the FrameBuffer
//  that corresponds to their respective gives coordinates.
// *** if spritePx != 0 ***
//
// DESCRIPTION :
//  The reason why we're checking the spritePx to not be 0 is because we don't want to draw any pixels that are set to 0.
//  Any pixels that are set to 0 (OFF) are going to be transparent or empty.
//-------------------------------------------------------------------------------------------------------------------------
// *** if *cellFrameBuffer == 1 { ***
//      c8.Registers[0xF] = 1
//	   }
// 
//  *** *cellFrameBuffer ^= 1 *** 
//
// DESCRIPTION :
//  This is where we'll modify the value inside of the FrameBuffer. The Get() method returns a memory address of the cell
//  inside the FrameBuffer and not the actual value. This is because we want to modify this value based on the sprite pixel.
//  So first we check if the value pointed by the pointer is equal to 1. If yes, we set the collision flag (VF) to 1 to show
//  that. Next we modify the value of the pointer by using the *. This way, we don't modify the value inside the variable, but
//  the value inside the FrameBuffer
//
// CODE :
// --- if *cellFrameBuffer == 1 {
//      c8.Registers[0xF] = 1
//	   }
//  We check if the value that the memory address points to (using the *) is equal to 1. If yes, set collision flag (VF) to 1 (ON)
//
// --- *cellFrameBuffer ^= 1
//  Here we check the same value and do a XOR operation (exclusive OR). We set the respective cell inside the FrameBuffer
//  to 1 (needs to be drawn) if spritePx = 1 OR *cellFrameBuffer = 1 EXCLUDING if both are set to 1. In that case we set the
//  collision flag (VF) to 1 (ON) and that's it
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (c8 *Chip8) I2NNN \\\
//
// Location : chip8/instructions.go
//-------------------------------------------------------------------------------------------------------------------------
// *** addr := c8.COpcode.NNN() ***
// *** c8.Stack[c8.Sp] = c8.Pc ***
// *** c8.Sp++ ****
// *** c8.Pc = addr ***
//
// DESCRIPTION :
//  This block of code to call a subroutine. The way I see it is as if you're executing a program in your main() but you need
//  to call a separate function elsewhere as to not put every line of code in one function. This is good but at some point
//  we need to come back to our main() function. This block of code does just that. 
//
// CODE :
//  --- addr := c8.COpcode.NNN()
//   Here we get the address of the subroutine that we need to jump to.
//
// --- c8.Stack[c8.Sp] = c8.Pc
//  The stack is responsible for the subroutines and managing the flow of execution. What we're doing here is storing our
//  our program counter as to not lose it since we'll need to return once the subroutine is completed (think going back to main())
//  The Sp (stack pointer) is here only to access the Stack by using it as an index.
//
// --- c8.Sp++
//  We know have stored our program counter is our 0 nesting level in our Stack. If this instruction would be called again,
//  we'll need to store the program counter at a another place in the Stack as to not lose the previous Pc.
//
// --- c8.Pc = addr 
//  Know that everything is set up, we can go where the subroutine is in the memory to execute the instructions there
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------
/// func (c8 *Chip8) I00EE{} \\\
//
// Location : chip8/instructions.go
//-------------------------------------------------------------------------------------------------------------------------
// *** c8.Sp-- ***
// *** c8.Pc = c8.Stack[c8.Sp] ***
//
// DESCRIPTION :
//  This block of code is used to return from the subroutine. To do that, we'll need to access the Stack using the stack pointer.
//  To go back a stack and get our previous program counter (to return from the subroutine), we'll decrease the value by 1 to
//  then access the program counter that was previously stored.
//
// CODE :
//  --- c8.Sp--
//   Decrease the stack pointer to go back by one in the Stack
//
// --- c8.Pc = c8.Stack[c8.Sp]
//  Now that our stack pointer has been diminished by 1, we can now go back and get that program counter that we stored earlier
//  to continue the main() function
---------------------------------------------------------------------------------------------------------------------------
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
---------------------------------------------------------------------------------------------------------------------------